diff --git a/frontend/app/(modals)/add-entry.tsx b/frontend/app/(modals)/add-entry.tsx
index 91d3b07..2907eb5 100644
--- a/frontend/app/(modals)/add-entry.tsx
+++ b/frontend/app/(modals)/add-entry.tsx
@@ -12,7 +12,6 @@ import {
 } from 'react-native';
 import { router, useLocalSearchParams } from 'expo-router';
 import { Ionicons } from '@expo/vector-icons';
-import { useTheme } from '../../src/contexts/ThemeContext';
 import { useAuth } from '../../src/contexts/AuthContext';
 import { apiClient } from '../../src/services/api';
 import LoadingSpinner from '../../src/components/LoadingSpinner';
diff --git a/model.patch b/model.patch
index b114a66..e69de29 100644
--- a/model.patch
+++ b/model.patch
@@ -1,2330 +0,0 @@
-diff --git a/frontend/app/modals_add-entry.tsx b/frontend/app/modals_add-entry.tsx
-index 91d3b07..dce7626 100644
---- a/frontend/app/modals_add-entry.tsx
-+++ b/frontend/app/modals_add-entry.tsx
-@@ -12,13 +12,11 @@ import {
- } from 'react-native';
- import { router, useLocalSearchParams } from 'expo-router';
- import { Ionicons } from '@expo/vector-icons';
--import { useTheme } from '../../src/contexts/ThemeContext';
- import { useAuth } from '../../src/contexts/AuthContext';
- import { apiClient } from '../../src/services/api';
- import LoadingSpinner from '../../src/components/LoadingSpinner';
- 
- export default function AddEntryModal() {
--  const { colors } = useTheme();
-   const params = useLocalSearchParams();
-   
-   const [formData, setFormData] = useState({
-diff --git a/model.patch b/model.patch
-index 7cfc280..e69de29 100644
---- a/model.patch
-+++ b/model.patch
-@@ -1,2307 +0,0 @@
--diff --git a/model.patch b/model.patch
--index 54195aa..e69de29 100644
----- a/model.patch
--+++ b/model.patch
--@@ -1,2107 +0,0 @@
---diff --git a/frontend/app/(modals)/add-entry.tsx b/frontend/app/(modals)/add-entry.tsx
---index c2fbd7f..91d3b07 100644
------ a/frontend/app/(modals)/add-entry.tsx
---+++ b/frontend/app/(modals)/add-entry.tsx
---@@ -23,8 +23,9 @@ export default function AddEntryModal() {
---   
---   const [formData, setFormData] = useState({
---     name: (params.foodName as string) || '',
----    sugarPer100g: (params.sugarPer100g as string) || '',
----    caloriesPer100g: (params.caloriesPer100g as string) || '',
---+    carbsPer100g: (params.carbs_per_100g as string) || (params.sugarPer100g as string) || '',
---+    fatPer100g: (params.fat_per_100g as string) || '',
---+    proteinPer100g: (params.protein_per_100g as string) || '',
---     portionSize: '100',
---     mealType: 'snack',
---   });
---@@ -34,32 +35,45 @@ export default function AddEntryModal() {
---     setFormData(prev => ({ ...prev, [field]: value }));
---   };
--- 
----  const calculateTotalSugar = () => {
----    const sugarPer100g = parseFloat(formData.sugarPer100g) || 0;
---+  const calculateSugarPoints = () => {
---+    const carbsPer100g = parseFloat(formData.carbsPer100g) || 0;
---     const portionSize = parseFloat(formData.portionSize) || 0;
----    return (sugarPer100g * portionSize) / 100;
---+    const totalCarbs = (carbsPer100g * portionSize) / 100;
---+    return Math.round(totalCarbs);
---   };
--- 
----  const calculateTotalCalories = () => {
----    const caloriesPer100g = parseFloat(formData.caloriesPer100g) || 0;
---+  const calculateSugarPointBlocks = () => {
---+    const sugarPoints = calculateSugarPoints();
---+    return Math.round(sugarPoints / 6);
---+  };
---+
---+  const calculateTotalFat = () => {
---+    const fatPer100g = parseFloat(formData.fatPer100g) || 0;
---     const portionSize = parseFloat(formData.portionSize) || 0;
----    return (caloriesPer100g * portionSize) / 100;
---+    return (fatPer100g * portionSize) / 100;
---+  };
---+
---+  const calculateTotalProtein = () => {
---+    const proteinPer100g = parseFloat(formData.proteinPer100g) || 0;
---+    const portionSize = parseFloat(formData.portionSize) || 0;
---+    return (proteinPer100g * portionSize) / 100;
---   };
--- 
---   const handleSave = async () => {
----    const { name, sugarPer100g, portionSize, caloriesPer100g } = formData;
---+    const { name, carbsPer100g, fatPer100g, proteinPer100g, portionSize } = formData;
--- 
---     if (!name.trim()) {
---       Alert.alert('Error', 'Please enter a food name');
---       return;
---     }
--- 
----    const sugarValue = parseFloat(sugarPer100g);
---+    const carbsValue = parseFloat(carbsPer100g);
---+    const fatValue = parseFloat(fatPer100g) || 0;
---+    const proteinValue = parseFloat(proteinPer100g) || 0;
---     const portionValue = parseFloat(portionSize);
----    const caloriesValue = parseFloat(caloriesPer100g) || 0;
--- 
----    if (isNaN(sugarValue) || sugarValue < 0) {
----      Alert.alert('Error', 'Please enter a valid sugar content');
---+    if (isNaN(carbsValue) || carbsValue < 0) {
---+      Alert.alert('Error', 'Please enter a valid carbohydrate content');
---       return;
---     }
--- 
---@@ -72,9 +86,10 @@ export default function AddEntryModal() {
---     try {
---       await apiClient.post('/food/entries', {
---         name: name.trim(),
----        sugar_content: sugarValue / 100, // Convert to sugar per gram
---+        carbs_per_100g: carbsValue,
---+        fat_per_100g: fatValue,
---+        protein_per_100g: proteinValue,
---         portion_size: portionValue,
----        calories: caloriesValue > 0 ? caloriesValue / 100 : null, // Convert to calories per gram
---         meal_type: formData.mealType,
---       });
--- 
---@@ -96,19 +111,37 @@ export default function AddEntryModal() {
---     return <LoadingSpinner />;
---   }
--- 
---+  const sugarPoints = calculateSugarPoints();
---+  const sugarPointBlocks = calculateSugarPointBlocks();
---+  const totalFat = calculateTotalFat();
---+  const totalProtein = calculateTotalProtein();
---+
---   return (
---     <KeyboardAvoidingView
----      style={[styles.container, { backgroundColor: colors.background }]}
---+      style={[styles.container, { backgroundColor: '#0c0c0c' }]}
---       behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
---       <ScrollView
---         style={styles.scrollContent}
---         contentContainerStyle={styles.scrollContentContainer}
---         showsVerticalScrollIndicator={false}>
---         
---+        {/* Header */}
---+        <View style={styles.header}>
---+          <TouchableOpacity
---+            style={styles.closeButton}
---+            onPress={() => router.back()}>
---+            <Ionicons name="close" size={24} color="#9CA3AF" />
---+          </TouchableOpacity>
---+          <Text style={[styles.headerTitle, { color: '#fff' }]}>
---+            Add Food Entry
---+          </Text>
---+          <View style={styles.headerSpacer} />
---+        </View>
---+
---         {/* Form */}
---         <View style={styles.form}>
---           <View style={styles.inputContainer}>
----            <Text style={[styles.label, { color: colors.text }]}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---               Meal Type
---             </Text>
---             <View style={styles.mealTypeContainer}>
---@@ -123,21 +156,21 @@ export default function AddEntryModal() {
---                   style={[
---                     styles.mealTypeButton,
---                     {
----                      backgroundColor: formData.mealType === meal.key ? colors.primary : colors.surface,
----                      borderColor: colors.border,
---+                      backgroundColor: formData.mealType === meal.key ? '#2563EB' : '#111827',
---+                      borderColor: '#374151',
---                     },
---                   ]}
---                   onPress={() => updateFormData('mealType', meal.key)}>
---                   <Ionicons
---                     name={meal.icon as any}
---                     size={20}
----                    color={formData.mealType === meal.key ? '#ffffff' : colors.text}
---+                    color={formData.mealType === meal.key ? '#ffffff' : '#E5E7EB'}
---                   />
---                   <Text
---                     style={[
---                       styles.mealTypeText,
---                       {
----                        color: formData.mealType === meal.key ? '#ffffff' : colors.text,
---+                        color: formData.mealType === meal.key ? '#ffffff' : '#E5E7EB',
---                       },
---                     ]}>
---                     {meal.label}
---@@ -148,126 +181,147 @@ export default function AddEntryModal() {
---           </View>
--- 
---           <View style={styles.inputContainer}>
----            <Text style={[styles.label, { color: colors.text }]}>Food Name</Text>
---+            <Text style={[styles.label, { color: '#fff' }]}>Food Name</Text>
---             <TextInput
---               style={[
---                 styles.input,
---                 {
----                  backgroundColor: colors.surface,
----                  borderColor: colors.border,
----                  color: colors.text,
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---                 },
---               ]}
---               value={formData.name}
---               onChangeText={(value) => updateFormData('name', value)}
----              placeholder="e.g., Apple, Chocolate Bar"
----              placeholderTextColor={colors.textSecondary}
---+              placeholder="e.g., Apple, Chicken Breast, Brown Rice"
---+              placeholderTextColor="#9CA3AF"
---               autoCapitalize="words"
---             />
---           </View>
--- 
---           <View style={styles.inputContainer}>
----            <Text style={[styles.label, { color: colors.text }]}>
----              Sugar Content (per 100g)
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Carbohydrates (per 100g)
---             </Text>
---             <TextInput
---               style={[
---                 styles.input,
---                 {
----                  backgroundColor: colors.surface,
----                  borderColor: colors.border,
----                  color: colors.text,
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---                 },
---               ]}
----              value={formData.sugarPer100g}
----              onChangeText={(value) => updateFormData('sugarPer100g', value)}
----              placeholder="e.g., 10.4"
----              placeholderTextColor={colors.textSecondary}
---+              value={formData.carbsPer100g}
---+              onChangeText={(value) => updateFormData('carbsPer100g', value)}
---+              placeholder="e.g., 14.0"
---+              placeholderTextColor="#9CA3AF"
---               keyboardType="decimal-pad"
---             />
----            <Text style={[styles.helperText, { color: colors.textSecondary }]}>
----              Check nutrition label or search online
---+            <Text style={[styles.helperText, { color: '#9CA3AF' }]}>
---+              Check nutrition label for total carbohydrates
---+            </Text>
---+          </View>
---+
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Fat (per 100g)
---             </Text>
---+            <TextInput
---+              style={[
---+                styles.input,
---+                {
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---+                },
---+              ]}
---+              value={formData.fatPer100g}
---+              onChangeText={(value) => updateFormData('fatPer100g', value)}
---+              placeholder="e.g., 0.2"
---+              placeholderTextColor="#9CA3AF"
---+              keyboardType="decimal-pad"
---+            />
---           </View>
--- 
---           <View style={styles.inputContainer}>
----            <Text style={[styles.label, { color: colors.text }]}>
----              Calories (per 100g) - Optional
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Protein (per 100g)
---             </Text>
---             <TextInput
---               style={[
---                 styles.input,
---                 {
----                  backgroundColor: colors.surface,
----                  borderColor: colors.border,
----                  color: colors.text,
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---                 },
---               ]}
----              value={formData.caloriesPer100g}
----              onChangeText={(value) => updateFormData('caloriesPer100g', value)}
----              placeholder="e.g., 52"
----              placeholderTextColor={colors.textSecondary}
---+              value={formData.proteinPer100g}
---+              onChangeText={(value) => updateFormData('proteinPer100g', value)}
---+              placeholder="e.g., 0.3"
---+              placeholderTextColor="#9CA3AF"
---               keyboardType="decimal-pad"
---             />
---           </View>
--- 
---           <View style={styles.inputContainer}>
----            <Text style={[styles.label, { color: colors.text }]}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---               Portion Size (grams)
---             </Text>
---             <TextInput
---               style={[
---                 styles.input,
---                 {
----                  backgroundColor: colors.surface,
----                  borderColor: colors.border,
----                  color: colors.text,
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---                 },
---               ]}
---               value={formData.portionSize}
---               onChangeText={(value) => updateFormData('portionSize', value)}
---               placeholder="e.g., 150"
----              placeholderTextColor={colors.textSecondary}
---+              placeholderTextColor="#9CA3AF"
---               keyboardType="decimal-pad"
---             />
----            <Text style={[styles.helperText, { color: colors.textSecondary }]}>
---+            <Text style={[styles.helperText, { color: '#9CA3AF' }]}>
---               Weight of the portion you consumed
---             </Text>
---           </View>
---         </View>
--- 
----        {/* Summary */}
----        <View style={[styles.summaryContainer, { backgroundColor: colors.surface }]}>
----          <Text style={[styles.summaryTitle, { color: colors.text }]}>
---+        {/* SugarPoints Summary */}
---+        <View style={[styles.summaryContainer, { backgroundColor: '#111827' }]}>
---+          <Text style={[styles.summaryTitle, { color: '#fff' }]}>
---             Nutrition Summary
---           </Text>
---           
----          <View style={styles.summaryRow}>
----            <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
----              Total Sugar:
----            </Text>
----            <Text style={[styles.summaryValue, { color: colors.primary }]}>
----              {calculateTotalSugar().toFixed(1)}g
---+          {/* SugarPoints Display */}
---+          <View style={styles.sugarPointsDisplay}>
---+            <Text style={[styles.sugarPointsAmount, { color: '#2563EB' }]}>
---+              {sugarPoints === 0 ? 'Nil SugarPoints' : `${sugarPoints} SugarPoints`}
---             </Text>
---+            {sugarPoints > 0 && (
---+              <Text style={[styles.sugarPointsBlocks, { color: '#E5E7EB' }]}>
---+                {sugarPointBlocks} Blocks
---+              </Text>
---+            )}
---           </View>
--- 
----          {formData.caloriesPer100g && (
----            <View style={styles.summaryRow}>
----              <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
----                Total Calories:
---+          {/* Nutrition Details */}
---+          <View style={styles.nutritionDetails}>
---+            {totalFat > 0 && (
---+              <Text style={[styles.nutritionText, { color: '#E5E7EB' }]}>
---+                Fat: {totalFat.toFixed(1)}g
---               </Text>
----              <Text style={[styles.summaryValue, { color: colors.text }]}>
----                {calculateTotalCalories().toFixed(0)} cal
---+            )}
---+            {totalProtein > 0 && (
---+              <Text style={[styles.nutritionText, { color: '#E5E7EB' }]}>
---+                Protein: {totalProtein.toFixed(1)}g
---               </Text>
----            </View>
----          )}
----
----          <View style={styles.summaryRow}>
----            <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
----              Portion:
----            </Text>
----            <Text style={[styles.summaryValue, { color: colors.text }]}>
----              {formData.portionSize}g
---+            )}
---+            <Text style={[styles.nutritionText, { color: '#E5E7EB' }]}>
---+              Portion: {formData.portionSize}g
---             </Text>
---           </View>
---         </View>
---@@ -275,15 +329,15 @@ export default function AddEntryModal() {
---         {/* Action Buttons */}
---         <View style={styles.actions}>
---           <TouchableOpacity
----            style={[styles.cancelButton, { borderColor: colors.border }]}
---+            style={[styles.cancelButton, { borderColor: '#374151', backgroundColor: '#111827' }]}
---             onPress={() => router.back()}>
----            <Text style={[styles.cancelButtonText, { color: colors.text }]}>
---+            <Text style={[styles.cancelButtonText, { color: '#E5E7EB' }]}>
---               Cancel
---             </Text>
---           </TouchableOpacity>
---           
---           <TouchableOpacity
----            style={[styles.saveButton, { backgroundColor: colors.primary }]}
---+            style={[styles.saveButton, { backgroundColor: '#2563EB' }]}
---             onPress={handleSave}
---             disabled={loading}>
---             <Text style={styles.saveButtonText}>Save Entry</Text>
---@@ -302,53 +356,84 @@ const styles = StyleSheet.create({
---     flex: 1,
---   },
---   scrollContentContainer: {
----    padding: 20,
---+    padding: 16,
---     paddingBottom: 40,
---   },
---+  header: {
---+    flexDirection: 'row',
---+    alignItems: 'center',
---+    justifyContent: 'space-between',
---+    marginBottom: 24,
---+    paddingTop: 8,
---+  },
---+  closeButton: {
---+    padding: 8,
---+  },
---+  headerTitle: {
---+    fontSize: 20,
---+    fontWeight: '700',
---+  },
---+  headerSpacer: {
---+    width: 40,
---+  },
---   form: {
---     marginBottom: 24,
---   },
---   inputContainer: {
----    marginBottom: 20,
---+    marginBottom: 16,
---   },
---   label: {
---     fontSize: 16,
----    fontWeight: '500',
---+    fontWeight: '700',
---     marginBottom: 8,
---   },
---   input: {
---     height: 48,
----    borderRadius: 12,
---+    borderRadius: 10,
---     borderWidth: 1,
----    paddingHorizontal: 16,
---+    paddingHorizontal: 12,
---     fontSize: 16,
---+    fontWeight: '400',
---   },
---   helperText: {
---     fontSize: 12,
---+    fontWeight: '400',
---     marginTop: 4,
---   },
---   summaryContainer: {
----    borderRadius: 12,
---+    borderRadius: 10,
---     padding: 16,
---     marginBottom: 24,
---+    borderColor: '#374151',
---+    borderWidth: 1,
---   },
---   summaryTitle: {
---     fontSize: 18,
----    fontWeight: '600',
----    marginBottom: 12,
---+    fontWeight: '700',
---+    marginBottom: 16,
---   },
----  summaryRow: {
----    flexDirection: 'row',
----    justifyContent: 'space-between',
---+  sugarPointsDisplay: {
---     alignItems: 'center',
----    marginBottom: 8,
---+    marginBottom: 16,
---   },
----  summaryLabel: {
----    fontSize: 16,
---+  sugarPointsAmount: {
---+    fontSize: 24,
---+    fontWeight: '700',
---+    marginBottom: 4,
---   },
----  summaryValue: {
----    fontSize: 16,
----    fontWeight: '600',
---+  sugarPointsBlocks: {
---+    fontSize: 14,
---+    fontWeight: '400',
---+  },
---+  nutritionDetails: {
---+    flexDirection: 'row',
---+    flexWrap: 'wrap',
---+    gap: 16,
---+    justifyContent: 'center',
---+  },
---+  nutritionText: {
---+    fontSize: 14,
---+    fontWeight: '400',
---   },
---   actions: {
---     flexDirection: 'row',
---@@ -357,26 +442,26 @@ const styles = StyleSheet.create({
---   cancelButton: {
---     flex: 1,
---     height: 48,
----    borderRadius: 12,
---+    borderRadius: 10,
---     borderWidth: 1,
---     alignItems: 'center',
---     justifyContent: 'center',
---   },
---   cancelButtonText: {
---     fontSize: 16,
----    fontWeight: '500',
---+    fontWeight: '400',
---   },
---   saveButton: {
---     flex: 1,
---     height: 48,
----    borderRadius: 12,
---+    borderRadius: 10,
---     alignItems: 'center',
---     justifyContent: 'center',
---   },
---   saveButtonText: {
---     color: '#ffffff',
---     fontSize: 16,
----    fontWeight: '600',
---+    fontWeight: '700',
---   },
---   mealTypeContainer: {
---     flexDirection: 'row',
---@@ -389,12 +474,12 @@ const styles = StyleSheet.create({
---     alignItems: 'center',
---     paddingHorizontal: 12,
---     paddingVertical: 8,
----    borderRadius: 8,
---+    borderRadius: 999, // Pill shape
---     borderWidth: 1,
---     gap: 6,
---   },
---   mealTypeText: {
---     fontSize: 14,
----    fontWeight: '500',
---+    fontWeight: '400',
---   },
--- });
---\ No newline at end of file
---diff --git a/frontend/app/modals_add-entry.tsx b/frontend/app/modals_add-entry.tsx
---new file mode 100644
---index 0000000..91d3b07
------ /dev/null
---+++ b/frontend/app/modals_add-entry.tsx
---@@ -0,0 +1,485 @@
---+import React, { useState } from 'react';
---+import {
---+  View,
---+  Text,
---+  TextInput,
---+  TouchableOpacity,
---+  StyleSheet,
---+  ScrollView,
---+  Alert,
---+  KeyboardAvoidingView,
---+  Platform,
---+} from 'react-native';
---+import { router, useLocalSearchParams } from 'expo-router';
---+import { Ionicons } from '@expo/vector-icons';
---+import { useTheme } from '../../src/contexts/ThemeContext';
---+import { useAuth } from '../../src/contexts/AuthContext';
---+import { apiClient } from '../../src/services/api';
---+import LoadingSpinner from '../../src/components/LoadingSpinner';
---+
---+export default function AddEntryModal() {
---+  const { colors } = useTheme();
---+  const params = useLocalSearchParams();
---+  
---+  const [formData, setFormData] = useState({
---+    name: (params.foodName as string) || '',
---+    carbsPer100g: (params.carbs_per_100g as string) || (params.sugarPer100g as string) || '',
---+    fatPer100g: (params.fat_per_100g as string) || '',
---+    proteinPer100g: (params.protein_per_100g as string) || '',
---+    portionSize: '100',
---+    mealType: 'snack',
---+  });
---+  const [loading, setLoading] = useState(false);
---+
---+  const updateFormData = (field: string, value: string) => {
---+    setFormData(prev => ({ ...prev, [field]: value }));
---+  };
---+
---+  const calculateSugarPoints = () => {
---+    const carbsPer100g = parseFloat(formData.carbsPer100g) || 0;
---+    const portionSize = parseFloat(formData.portionSize) || 0;
---+    const totalCarbs = (carbsPer100g * portionSize) / 100;
---+    return Math.round(totalCarbs);
---+  };
---+
---+  const calculateSugarPointBlocks = () => {
---+    const sugarPoints = calculateSugarPoints();
---+    return Math.round(sugarPoints / 6);
---+  };
---+
---+  const calculateTotalFat = () => {
---+    const fatPer100g = parseFloat(formData.fatPer100g) || 0;
---+    const portionSize = parseFloat(formData.portionSize) || 0;
---+    return (fatPer100g * portionSize) / 100;
---+  };
---+
---+  const calculateTotalProtein = () => {
---+    const proteinPer100g = parseFloat(formData.proteinPer100g) || 0;
---+    const portionSize = parseFloat(formData.portionSize) || 0;
---+    return (proteinPer100g * portionSize) / 100;
---+  };
---+
---+  const handleSave = async () => {
---+    const { name, carbsPer100g, fatPer100g, proteinPer100g, portionSize } = formData;
---+
---+    if (!name.trim()) {
---+      Alert.alert('Error', 'Please enter a food name');
---+      return;
---+    }
---+
---+    const carbsValue = parseFloat(carbsPer100g);
---+    const fatValue = parseFloat(fatPer100g) || 0;
---+    const proteinValue = parseFloat(proteinPer100g) || 0;
---+    const portionValue = parseFloat(portionSize);
---+
---+    if (isNaN(carbsValue) || carbsValue < 0) {
---+      Alert.alert('Error', 'Please enter a valid carbohydrate content');
---+      return;
---+    }
---+
---+    if (isNaN(portionValue) || portionValue <= 0) {
---+      Alert.alert('Error', 'Please enter a valid portion size');
---+      return;
---+    }
---+
---+    setLoading(true);
---+    try {
---+      await apiClient.post('/food/entries', {
---+        name: name.trim(),
---+        carbs_per_100g: carbsValue,
---+        fat_per_100g: fatValue,
---+        protein_per_100g: proteinValue,
---+        portion_size: portionValue,
---+        meal_type: formData.mealType,
---+      });
---+
---+      Alert.alert('Success', 'Food entry added successfully!', [
---+        { text: 'OK', onPress: () => router.back() },
---+      ]);
---+    } catch (error: any) {
---+      console.error('Error adding food entry:', error);
---+      Alert.alert(
---+        'Error',
---+        error.response?.data?.detail || 'Failed to add food entry'
---+      );
---+    } finally {
---+      setLoading(false);
---+    }
---+  };
---+
---+  if (loading) {
---+    return <LoadingSpinner />;
---+  }
---+
---+  const sugarPoints = calculateSugarPoints();
---+  const sugarPointBlocks = calculateSugarPointBlocks();
---+  const totalFat = calculateTotalFat();
---+  const totalProtein = calculateTotalProtein();
---+
---+  return (
---+    <KeyboardAvoidingView
---+      style={[styles.container, { backgroundColor: '#0c0c0c' }]}
---+      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
---+      <ScrollView
---+        style={styles.scrollContent}
---+        contentContainerStyle={styles.scrollContentContainer}
---+        showsVerticalScrollIndicator={false}>
---+        
---+        {/* Header */}
---+        <View style={styles.header}>
---+          <TouchableOpacity
---+            style={styles.closeButton}
---+            onPress={() => router.back()}>
---+            <Ionicons name="close" size={24} color="#9CA3AF" />
---+          </TouchableOpacity>
---+          <Text style={[styles.headerTitle, { color: '#fff' }]}>
---+            Add Food Entry
---+          </Text>
---+          <View style={styles.headerSpacer} />
---+        </View>
---+
---+        {/* Form */}
---+        <View style={styles.form}>
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Meal Type
---+            </Text>
---+            <View style={styles.mealTypeContainer}>
---+              {[
---+                { key: 'breakfast', label: 'Breakfast', icon: 'sunny' },
---+                { key: 'lunch', label: 'Lunch', icon: 'restaurant' },
---+                { key: 'dinner', label: 'Dinner', icon: 'moon' },
---+                { key: 'snack', label: 'Snack', icon: 'fast-food' },
---+              ].map((meal) => (
---+                <TouchableOpacity
---+                  key={meal.key}
---+                  style={[
---+                    styles.mealTypeButton,
---+                    {
---+                      backgroundColor: formData.mealType === meal.key ? '#2563EB' : '#111827',
---+                      borderColor: '#374151',
---+                    },
---+                  ]}
---+                  onPress={() => updateFormData('mealType', meal.key)}>
---+                  <Ionicons
---+                    name={meal.icon as any}
---+                    size={20}
---+                    color={formData.mealType === meal.key ? '#ffffff' : '#E5E7EB'}
---+                  />
---+                  <Text
---+                    style={[
---+                      styles.mealTypeText,
---+                      {
---+                        color: formData.mealType === meal.key ? '#ffffff' : '#E5E7EB',
---+                      },
---+                    ]}>
---+                    {meal.label}
---+                  </Text>
---+                </TouchableOpacity>
---+              ))}
---+            </View>
---+          </View>
---+
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>Food Name</Text>
---+            <TextInput
---+              style={[
---+                styles.input,
---+                {
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---+                },
---+              ]}
---+              value={formData.name}
---+              onChangeText={(value) => updateFormData('name', value)}
---+              placeholder="e.g., Apple, Chicken Breast, Brown Rice"
---+              placeholderTextColor="#9CA3AF"
---+              autoCapitalize="words"
---+            />
---+          </View>
---+
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Carbohydrates (per 100g)
---+            </Text>
---+            <TextInput
---+              style={[
---+                styles.input,
---+                {
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---+                },
---+              ]}
---+              value={formData.carbsPer100g}
---+              onChangeText={(value) => updateFormData('carbsPer100g', value)}
---+              placeholder="e.g., 14.0"
---+              placeholderTextColor="#9CA3AF"
---+              keyboardType="decimal-pad"
---+            />
---+            <Text style={[styles.helperText, { color: '#9CA3AF' }]}>
---+              Check nutrition label for total carbohydrates
---+            </Text>
---+          </View>
---+
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Fat (per 100g)
---+            </Text>
---+            <TextInput
---+              style={[
---+                styles.input,
---+                {
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---+                },
---+              ]}
---+              value={formData.fatPer100g}
---+              onChangeText={(value) => updateFormData('fatPer100g', value)}
---+              placeholder="e.g., 0.2"
---+              placeholderTextColor="#9CA3AF"
---+              keyboardType="decimal-pad"
---+            />
---+          </View>
---+
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Protein (per 100g)
---+            </Text>
---+            <TextInput
---+              style={[
---+                styles.input,
---+                {
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---+                },
---+              ]}
---+              value={formData.proteinPer100g}
---+              onChangeText={(value) => updateFormData('proteinPer100g', value)}
---+              placeholder="e.g., 0.3"
---+              placeholderTextColor="#9CA3AF"
---+              keyboardType="decimal-pad"
---+            />
---+          </View>
---+
---+          <View style={styles.inputContainer}>
---+            <Text style={[styles.label, { color: '#fff' }]}>
---+              Portion Size (grams)
---+            </Text>
---+            <TextInput
---+              style={[
---+                styles.input,
---+                {
---+                  backgroundColor: '#111827',
---+                  borderColor: '#374151',
---+                  color: '#E5E7EB',
---+                },
---+              ]}
---+              value={formData.portionSize}
---+              onChangeText={(value) => updateFormData('portionSize', value)}
---+              placeholder="e.g., 150"
---+              placeholderTextColor="#9CA3AF"
---+              keyboardType="decimal-pad"
---+            />
---+            <Text style={[styles.helperText, { color: '#9CA3AF' }]}>
---+              Weight of the portion you consumed
---+            </Text>
---+          </View>
---+        </View>
---+
---+        {/* SugarPoints Summary */}
---+        <View style={[styles.summaryContainer, { backgroundColor: '#111827' }]}>
---+          <Text style={[styles.summaryTitle, { color: '#fff' }]}>
---+            Nutrition Summary
---+          </Text>
---+          
---+          {/* SugarPoints Display */}
---+          <View style={styles.sugarPointsDisplay}>
---+            <Text style={[styles.sugarPointsAmount, { color: '#2563EB' }]}>
---+              {sugarPoints === 0 ? 'Nil SugarPoints' : `${sugarPoints} SugarPoints`}
---+            </Text>
---+            {sugarPoints > 0 && (
---+              <Text style={[styles.sugarPointsBlocks, { color: '#E5E7EB' }]}>
---+                {sugarPointBlocks} Blocks
---+              </Text>
---+            )}
---+          </View>
---+
---+          {/* Nutrition Details */}
---+          <View style={styles.nutritionDetails}>
---+            {totalFat > 0 && (
---+              <Text style={[styles.nutritionText, { color: '#E5E7EB' }]}>
---+                Fat: {totalFat.toFixed(1)}g
---+              </Text>
---+            )}
---+            {totalProtein > 0 && (
---+              <Text style={[styles.nutritionText, { color: '#E5E7EB' }]}>
---+                Protein: {totalProtein.toFixed(1)}g
---+              </Text>
---+            )}
---+            <Text style={[styles.nutritionText, { color: '#E5E7EB' }]}>
---+              Portion: {formData.portionSize}g
---+            </Text>
---+          </View>
---+        </View>
---+
---+        {/* Action Buttons */}
---+        <View style={styles.actions}>
---+          <TouchableOpacity
---+            style={[styles.cancelButton, { borderColor: '#374151', backgroundColor: '#111827' }]}
---+            onPress={() => router.back()}>
---+            <Text style={[styles.cancelButtonText, { color: '#E5E7EB' }]}>
---+              Cancel
---+            </Text>
---+          </TouchableOpacity>
---+          
---+          <TouchableOpacity
---+            style={[styles.saveButton, { backgroundColor: '#2563EB' }]}
---+            onPress={handleSave}
---+            disabled={loading}>
---+            <Text style={styles.saveButtonText}>Save Entry</Text>
---+          </TouchableOpacity>
---+        </View>
---+      </ScrollView>
---+    </KeyboardAvoidingView>
---+  );
---+}
---+
---+const styles = StyleSheet.create({
---+  container: {
---+    flex: 1,
---+  },
---+  scrollContent: {
---+    flex: 1,
---+  },
---+  scrollContentContainer: {
---+    padding: 16,
---+    paddingBottom: 40,
---+  },
---+  header: {
---+    flexDirection: 'row',
---+    alignItems: 'center',
---+    justifyContent: 'space-between',
---+    marginBottom: 24,
---+    paddingTop: 8,
---+  },
---+  closeButton: {
---+    padding: 8,
---+  },
---+  headerTitle: {
---+    fontSize: 20,
---+    fontWeight: '700',
---+  },
---+  headerSpacer: {
---+    width: 40,
---+  },
---+  form: {
---+    marginBottom: 24,
---+  },
---+  inputContainer: {
---+    marginBottom: 16,
---+  },
---+  label: {
---+    fontSize: 16,
---+    fontWeight: '700',
---+    marginBottom: 8,
---+  },
---+  input: {
---+    height: 48,
---+    borderRadius: 10,
---+    borderWidth: 1,
---+    paddingHorizontal: 12,
---+    fontSize: 16,
---+    fontWeight: '400',
---+  },
---+  helperText: {
---+    fontSize: 12,
---+    fontWeight: '400',
---+    marginTop: 4,
---+  },
---+  summaryContainer: {
---+    borderRadius: 10,
---+    padding: 16,
---+    marginBottom: 24,
---+    borderColor: '#374151',
---+    borderWidth: 1,
---+  },
---+  summaryTitle: {
---+    fontSize: 18,
---+    fontWeight: '700',
---+    marginBottom: 16,
---+  },
---+  sugarPointsDisplay: {
---+    alignItems: 'center',
---+    marginBottom: 16,
---+  },
---+  sugarPointsAmount: {
---+    fontSize: 24,
---+    fontWeight: '700',
---+    marginBottom: 4,
---+  },
---+  sugarPointsBlocks: {
---+    fontSize: 14,
---+    fontWeight: '400',
---+  },
---+  nutritionDetails: {
---+    flexDirection: 'row',
---+    flexWrap: 'wrap',
---+    gap: 16,
---+    justifyContent: 'center',
---+  },
---+  nutritionText: {
---+    fontSize: 14,
---+    fontWeight: '400',
---+  },
---+  actions: {
---+    flexDirection: 'row',
---+    gap: 12,
---+  },
---+  cancelButton: {
---+    flex: 1,
---+    height: 48,
---+    borderRadius: 10,
---+    borderWidth: 1,
---+    alignItems: 'center',
---+    justifyContent: 'center',
---+  },
---+  cancelButtonText: {
---+    fontSize: 16,
---+    fontWeight: '400',
---+  },
---+  saveButton: {
---+    flex: 1,
---+    height: 48,
---+    borderRadius: 10,
---+    alignItems: 'center',
---+    justifyContent: 'center',
---+  },
---+  saveButtonText: {
---+    color: '#ffffff',
---+    fontSize: 16,
---+    fontWeight: '700',
---+  },
---+  mealTypeContainer: {
---+    flexDirection: 'row',
---+    flexWrap: 'wrap',
---+    gap: 8,
---+    marginTop: 8,
---+  },
---+  mealTypeButton: {
---+    flexDirection: 'row',
---+    alignItems: 'center',
---+    paddingHorizontal: 12,
---+    paddingVertical: 8,
---+    borderRadius: 999, // Pill shape
---+    borderWidth: 1,
---+    gap: 6,
---+  },
---+  mealTypeText: {
---+    fontSize: 14,
---+    fontWeight: '400',
---+  },
---+});
---\ No newline at end of file
---diff --git a/model.patch b/model.patch
---index ab1e98a..e0b3b7b 100644
------ a/model.patch
---+++ b/model.patch
---@@ -1,1086 +0,0 @@
----diff --git a/frontend/app/(tabs)/home.tsx b/frontend/app/(tabs)/home.tsx
----index 1b5e6f1..2d7a219 100644
------- a/frontend/app/(tabs)/home.tsx
----+++ b/frontend/app/(tabs)/home.tsx
----@@ -20,6 +20,12 @@ import ProgressCircle from '../../src/components/ProgressCircle';
---- 
---- interface TodayData {
----   entries: any[];
----+  // SugarPoints system fields
----+  total_sugar_points: number;
----+  total_sugar_point_blocks: number;
----+  sugar_points_text: string;
----+  sugar_point_blocks_text: string;
----+  // Legacy fields for backward compatibility
----   total_sugar: number;
----   daily_goal: number;
----   percentage: number;
----@@ -64,25 +70,34 @@ export default function HomeScreen() {
----     return 'Good Evening';
----   };
---- 
-----  const getSugarStatus = () => {
----+  const getSugarPointsStatus = () => {
----     if (!todayData) return { text: 'No data', color: colors.textSecondary };
----     
-----    const percentage = todayData.percentage;
-----    if (percentage <= 50) return { text: 'Great job! 🎉', color: colors.success };
-----    if (percentage <= 80) return { text: 'Doing well 👍', color: colors.warning };
-----    if (percentage <= 100) return { text: 'Getting close ⚠️', color: colors.warning };
-----    return { text: 'Over limit 🚨', color: colors.error };
----+    const sugarPoints = todayData.total_sugar_points || 0;
----+    if (sugarPoints === 0) return { text: 'Perfect start! 🎉', color: '#10B981' };
----+    if (sugarPoints <= 30) return { text: 'Great control! 🎯', color: '#10B981' };
----+    if (sugarPoints <= 60) return { text: 'Doing well 👍', color: '#FDE68A' };
----+    if (sugarPoints <= 100) return { text: 'Watch your intake ⚠️', color: '#FDE68A' };
----+    return { text: 'High intake today 🚨', color: '#FCA5A5' };
----+  };
----+
----+  const getSugarPointsCircleProgress = () => {
----+    if (!todayData) return 0;
----+    const sugarPoints = todayData.total_sugar_points || 0;
----+    // Use 120 as a reasonable daily target for SugarPoints (equivalent to ~120g carbs)
----+    const targetSugarPoints = 120;
----+    return Math.min((sugarPoints / targetSugarPoints) * 100, 100);
----   };
---- 
----   if (loading) {
----     return <LoadingSpinner />;
----   }
---- 
-----  const sugarStatus = getSugarStatus();
----+  const sugarPointsStatus = getSugarPointsStatus();
---- 
----   return (
----     <ScrollView
-----      style={[styles.container, { backgroundColor: colors.background }]}
----+      style={[styles.container, { backgroundColor: '#0c0c0c' }]}
----       contentContainerStyle={[styles.content, { paddingTop: insets.top }]}
----       refreshControl={
----         <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
----@@ -91,42 +106,45 @@ export default function HomeScreen() {
----       {/* Header */}
----       <View style={styles.header}>
----         <View>
-----          <Text style={[styles.greeting, { color: colors.textSecondary }]}>
----+          <Text style={[styles.greeting, { color: '#9CA3AF' }]}>
----             {getGreeting()}
----           </Text>
-----          <Text style={[styles.userName, { color: colors.text }]}>
----+          <Text style={[styles.userName, { color: '#fff' }]}>
----             {user?.name}
----           </Text>
----         </View>
----         <TouchableOpacity
-----          style={[styles.profileButton, { backgroundColor: colors.surface }]}
----+          style={[styles.profileButton, { backgroundColor: '#111827' }]}
----           onPress={() => router.push('/profile')}>
-----          <Ionicons name="person" size={24} color={colors.primary} />
----+          <Ionicons name="person" size={24} color="#2563EB" />
----         </TouchableOpacity>
----       </View>
---- 
----       {/* Daily Progress Card */}
-----      <View style={[styles.progressCard, { backgroundColor: colors.surface }]}>
-----        <Text style={[styles.cardTitle, { color: colors.text }]}>
-----          Today's Sugar Intake
----+      <View style={[styles.progressCard, { backgroundColor: '#111827' }]}>
----+        <Text style={[styles.cardTitle, { color: '#fff' }]}>
----+          Today's SugarPoints Intake
----         </Text>
----         
----         <View style={styles.progressContainer}>
----           <ProgressCircle
-----            percentage={todayData?.percentage || 0}
----+            percentage={getSugarPointsCircleProgress()}
----             size={120}
----             strokeWidth={8}
-----            color={colors.primary}
----+            color="#2563EB"
----           />
----           <View style={styles.progressDetails}>
-----            <Text style={[styles.sugarAmount, { color: colors.text }]}>
-----              {todayData?.total_sugar.toFixed(1) || '0.0'}g
----+            <Text style={[styles.sugarPointsAmount, { color: '#fff' }]}>
----+              {todayData?.total_sugar_points || 0}
----+            </Text>
----+            <Text style={[styles.sugarPointsLabel, { color: '#2563EB' }]}>
----+              SugarPoints
----             </Text>
-----            <Text style={[styles.sugarGoal, { color: colors.textSecondary }]}>
-----              of {todayData?.daily_goal || 50}g daily goal
----+            <Text style={[styles.sugarPointsBlocks, { color: '#E5E7EB' }]}>
----+              {todayData?.sugar_point_blocks_text || '0 Blocks'}
----             </Text>
-----            <Text style={[styles.statusText, { color: sugarStatus.color }]}>
-----              {sugarStatus.text}
----+            <Text style={[styles.statusText, { color: sugarPointsStatus.color }]}>
----+              {sugarPointsStatus.text}
----             </Text>
----           </View>
----         </View>
----@@ -134,43 +152,43 @@ export default function HomeScreen() {
---- 
----       {/* Quick Actions */}
----       <View style={styles.quickActions}>
-----        <Text style={[styles.sectionTitle, { color: colors.text }]}>
----+        <Text style={[styles.sectionTitle, { color: '#fff' }]}>
----           Quick Actions
----         </Text>
----         
----         <View style={styles.actionGrid}>
----           <TouchableOpacity
-----            style={[styles.actionButton, { backgroundColor: colors.surface }]}
----+            style={[styles.actionButton, { backgroundColor: '#111827', borderColor: '#374151', borderWidth: 1 }]}
----             onPress={() => router.push('/(modals)/add-entry')}>
-----            <Ionicons name="add-circle" size={32} color={colors.primary} />
-----            <Text style={[styles.actionText, { color: colors.text }]}>
----+            <Ionicons name="add-circle" size={32} color="#2563EB" />
----+            <Text style={[styles.actionText, { color: '#fff' }]}>
----               Log Food
----             </Text>
----           </TouchableOpacity>
----           
----           <TouchableOpacity
-----            style={[styles.actionButton, { backgroundColor: colors.surface }]}
----+            style={[styles.actionButton, { backgroundColor: '#111827', borderColor: '#374151', borderWidth: 1 }]}
----             onPress={() => router.push('/(tabs)/scanner')}>
-----            <Ionicons name="camera" size={32} color={colors.primary} />
-----            <Text style={[styles.actionText, { color: colors.text }]}>
----+            <Ionicons name="camera" size={32} color="#2563EB" />
----+            <Text style={[styles.actionText, { color: '#fff' }]}>
----               Scan Food
----             </Text>
----           </TouchableOpacity>
----           
----           <TouchableOpacity
-----            style={[styles.actionButton, { backgroundColor: colors.surface }]}
-----            onPress={() => router.push('/(tabs)/chat')}>
-----            <Ionicons name="chatbubble-ellipses" size={32} color={colors.primary} />
-----            <Text style={[styles.actionText, { color: colors.text }]}>
----+            style={[styles.actionButton, { backgroundColor: '#111827', borderColor: '#374151', borderWidth: 1 }]}
----+            onPress={() => router.push('/(tabs)/aichat')}>
----+            <Ionicons name="chatbubble-ellipses" size={32} color="#2563EB" />
----+            <Text style={[styles.actionText, { color: '#fff' }]}>
----               Ask AI Coach
----             </Text>
----           </TouchableOpacity>
----           
----           <TouchableOpacity
-----            style={[styles.actionButton, { backgroundColor: colors.surface }]}
----+            style={[styles.actionButton, { backgroundColor: '#111827', borderColor: '#374151', borderWidth: 1 }]}
----             onPress={() => router.push('/(tabs)/progress')}>
-----            <Ionicons name="analytics" size={32} color={colors.primary} />
-----            <Text style={[styles.actionText, { color: colors.text }]}>
----+            <Ionicons name="analytics" size={32} color="#2563EB" />
----+            <Text style={[styles.actionText, { color: '#fff' }]}>
----               View Progress
----             </Text>
----           </TouchableOpacity>
----@@ -180,23 +198,25 @@ export default function HomeScreen() {
----       {/* Recent Entries */}
----       {todayData?.entries && todayData.entries.length > 0 && (
----         <View style={styles.recentEntries}>
-----          <Text style={[styles.sectionTitle, { color: colors.text }]}>
----+          <Text style={[styles.sectionTitle, { color: '#fff' }]}>
----             Today's Foods
----           </Text>
----           
----           {todayData.entries.slice(0, 3).map((entry, index) => (
----             <View
----               key={entry.id}
-----              style={[styles.entryItem, { backgroundColor: colors.surface }]}>
----+              style={[styles.entryItem, { backgroundColor: '#1f2937', borderColor: '#374151', borderWidth: 1 }]}>
----               <View style={styles.entryInfo}>
-----                <Text style={[styles.entryName, { color: colors.text }]}>
----+                <Text style={[styles.entryName, { color: '#fff' }]}>
----                   {entry.name}
----                 </Text>
-----                <Text style={[styles.entryDetails, { color: colors.textSecondary }]}>
-----                  {entry.portion_size}g • {(entry.sugar_content * entry.portion_size).toFixed(1)}g sugar
----+                <Text style={[styles.entryDetails, { color: '#E5E7EB' }]}>
----+                  {entry.portion_size}g • {entry.sugar_points || 0} SugarPoints
----+                  {entry.fat_per_100g > 0 && ` • Fat: ${(entry.fat_per_100g * entry.portion_size / 100).toFixed(1)}g`}
----+                  {entry.protein_per_100g > 0 && ` • Protein: ${(entry.protein_per_100g * entry.portion_size / 100).toFixed(1)}g`}
----                 </Text>
----               </View>
-----              <Ionicons name="chevron-forward" size={20} color={colors.textSecondary} />
----+              <Ionicons name="chevron-forward" size={20} color="#9CA3AF" />
----             </View>
----           ))}
----           
----@@ -204,7 +224,7 @@ export default function HomeScreen() {
----             <TouchableOpacity
----               style={styles.viewAllButton}
----               onPress={() => router.push('/(tabs)/progress')}>
-----              <Text style={[styles.viewAllText, { color: colors.primary }]}>
----+              <Text style={[styles.viewAllText, { color: '#2563EB' }]}>
----                 View all {todayData.entries.length} entries
----               </Text>
----             </TouchableOpacity>
----@@ -220,7 +240,7 @@ const styles = StyleSheet.create({
----     flex: 1,
----   },
----   content: {
-----    padding: 20,
----+    padding: 16, // Following 8pt grid system
----     paddingBottom: 100,
----   },
----   header: {
----@@ -231,28 +251,32 @@ const styles = StyleSheet.create({
----   },
----   greeting: {
----     fontSize: 16,
----+    fontWeight: '400',
----     marginBottom: 4,
----   },
----   userName: {
----     fontSize: 24,
-----    fontWeight: 'bold',
----+    fontWeight: '700',
----   },
----   profileButton: {
----     width: 44,
----     height: 44,
-----    borderRadius: 22,
----+    borderRadius: 10,
----     alignItems: 'center',
----     justifyContent: 'center',
----+    borderColor: '#374151',
----+    borderWidth: 1,
----   },
----   progressCard: {
-----    borderRadius: 16,
----+    borderRadius: 10,
----     padding: 24,
----     marginBottom: 24,
-----    ...webSafeShadow.medium,
----+    borderColor: '#374151',
----+    borderWidth: 1,
----   },
----   cardTitle: {
----     fontSize: 18,
-----    fontWeight: '600',
----+    fontWeight: '700',
----     marginBottom: 20,
----     textAlign: 'center',
----   },
----@@ -264,43 +288,49 @@ const styles = StyleSheet.create({
----   progressDetails: {
----     alignItems: 'center',
----   },
-----  sugarAmount: {
----+  sugarPointsAmount: {
----     fontSize: 32,
-----    fontWeight: 'bold',
----+    fontWeight: '700',
----+    marginBottom: 4,
----+  },
----+  sugarPointsLabel: {
----+    fontSize: 16,
----+    fontWeight: '700',
----     marginBottom: 4,
----   },
-----  sugarGoal: {
----+  sugarPointsBlocks: {
----     fontSize: 14,
----+    fontWeight: '400',
----     marginBottom: 8,
----   },
----   statusText: {
-----    fontSize: 16,
-----    fontWeight: '600',
----+    fontSize: 14,
----+    fontWeight: '700',
----   },
----   quickActions: {
----     marginBottom: 24,
----   },
----   sectionTitle: {
----     fontSize: 20,
-----    fontWeight: '600',
----+    fontWeight: '700',
----     marginBottom: 16,
----   },
----   actionGrid: {
----     flexDirection: 'row',
----     flexWrap: 'wrap',
----     justifyContent: 'space-between',
----+    gap: 8,
----   },
----   actionButton: {
----     width: '48%',
-----    borderRadius: 12,
-----    padding: 20,
----+    borderRadius: 10,
----+    padding: 16,
----     alignItems: 'center',
-----    marginBottom: 12,
-----    ...webSafeShadow.small,
----+    marginBottom: 8,
----   },
----   actionText: {
----     fontSize: 14,
-----    fontWeight: '500',
----+    fontWeight: '400',
----     marginTop: 8,
----     textAlign: 'center',
----   },
----@@ -311,21 +341,21 @@ const styles = StyleSheet.create({
----     flexDirection: 'row',
----     alignItems: 'center',
----     justifyContent: 'space-between',
-----    padding: 16,
-----    borderRadius: 12,
----+    padding: 12,
----+    borderRadius: 10,
----     marginBottom: 8,
-----    ...webSafeShadow.small,
----   },
----   entryInfo: {
----     flex: 1,
----   },
----   entryName: {
----     fontSize: 16,
-----    fontWeight: '500',
----+    fontWeight: '700',
----     marginBottom: 4,
----   },
----   entryDetails: {
-----    fontSize: 14,
----+    fontSize: 12,
----+    fontWeight: '400',
----   },
----   viewAllButton: {
----     paddingVertical: 12,
----@@ -333,6 +363,6 @@ const styles = StyleSheet.create({
----   },
----   viewAllText: {
----     fontSize: 16,
-----    fontWeight: '500',
----+    fontWeight: '700',
----   },
---- });
----\ No newline at end of file
----diff --git a/model.patch b/model.patch
----index 2f85621..236be7f 100644
------- a/model.patch
----+++ b/model.patch
----@@ -1,717 +0,0 @@
-----diff --git a/backend/server.py b/backend/server.py
-----index 9fedf9a..be89e9b 100644
-------- a/backend/server.py
-----+++ b/backend/server.py
-----@@ -328,20 +328,23 @@ async def create_food_entry(entry_data: FoodEntryCreate, current_user: User = De
-----         return entry
-----     except Exception as e:
-----         # If new columns don't exist, try with minimal fields
------        if any(field in str(e) for field in ["carbs_per_100g", "fat_per_100g", "protein_per_100g", "sugar_points"]):
------            logger.warning("New SugarPoints columns not found, inserting with legacy fields")
------            legacy_entry_dict = {
-----+        if any(field in str(e) for field in ["carbs_per_100g", "fat_per_100g", "protein_per_100g", "sugar_points", "meal_type"]):
-----+            logger.warning(f"New columns not found in database schema, inserting with basic legacy fields: {str(e)}")
-----+            # Use only the most basic fields that should exist in any food_entries table
-----+            basic_entry_dict = {
-----                 "id": entry_dict["id"],
-----                 "user_id": entry_dict["user_id"],
-----                 "name": entry_dict["name"],
-----                 "sugar_content": entry_dict["sugar_content"],
-----                 "portion_size": entry_dict["portion_size"],
------                "calories": entry_dict.get("calories"),
------                "meal_type": entry_dict.get("meal_type", "snack"),
-----                 "timestamp": entry_dict["timestamp"]
-----             }
-----             
------            result = supabase.table('food_entries').insert(legacy_entry_dict).execute()
-----+            # Only add calories if it's not None
-----+            if entry_dict.get("calories") is not None:
-----+                basic_entry_dict["calories"] = entry_dict["calories"]
-----+            
-----+            result = supabase.table('food_entries').insert(basic_entry_dict).execute()
-----             if not result.data:
-----                 raise HTTPException(status_code=500, detail="Failed to create food entry")
-----             
-----diff --git a/sugarpoints_test.py b/sugarpoints_test.py
-----new file mode 100644
-----index 0000000..c723df1
-------- /dev/null
-----+++ b/sugarpoints_test.py
-----@@ -0,0 +1,573 @@
-----+#!/usr/bin/env python3
-----+"""
-----+Backend Testing Suite for SugarPoints System - Phase A Implementation
-----+Tests all 8 evaluation cases from specification and API endpoints
-----+"""
-----+
-----+import requests
-----+import json
-----+import os
-----+import sys
-----+from datetime import datetime
-----+from typing import Dict, Any, Optional
-----+
-----+# Get backend URL from environment
-----+BACKEND_URL = os.getenv('REACT_APP_BACKEND_URL', 'https://nutriai-14.preview.emergentagent.com')
-----+API_BASE = f"{BACKEND_URL}/api"
-----+
-----+class SugarPointsBackendTester:
-----+    def __init__(self):
-----+        self.session = requests.Session()
-----+        self.auth_token = None
-----+        self.user_id = None
-----+        self.test_results = []
-----+        
-----+    def log_test(self, test_name: str, passed: bool, details: str = "", expected: Any = None, actual: Any = None):
-----+        """Log test results"""
-----+        result = {
-----+            "test": test_name,
-----+            "passed": passed,
-----+            "details": details,
-----+            "expected": expected,
-----+            "actual": actual,
-----+            "timestamp": datetime.now().isoformat()
-----+        }
-----+        self.test_results.append(result)
-----+        
-----+        status = "✅ PASS" if passed else "❌ FAIL"
-----+        print(f"{status}: {test_name}")
-----+        if details:
-----+            print(f"   Details: {details}")
-----+        if not passed and expected is not None and actual is not None:
-----+            print(f"   Expected: {expected}")
-----+            print(f"   Actual: {actual}")
-----+        print()
-----+
-----+    def setup_auth(self) -> bool:
-----+        """Setup authentication for testing"""
-----+        try:
-----+            # Register a test user
-----+            test_email = f"sugarpoints_test_{datetime.now().timestamp()}@test.com"
-----+            register_data = {
-----+                "email": test_email,
-----+                "password": "TestPassword123!",
-----+                "name": "SugarPoints Test User",
-----+                "daily_sugar_goal": 50.0
-----+            }
-----+            
-----+            response = self.session.post(f"{API_BASE}/auth/register", json=register_data)
-----+            
-----+            if response.status_code == 200:
-----+                data = response.json()
-----+                self.auth_token = data["access_token"]
-----+                self.user_id = data["user"]["id"]
-----+                self.session.headers.update({"Authorization": f"Bearer {self.auth_token}"})
-----+                self.log_test("Authentication Setup", True, f"User registered: {test_email}")
-----+                return True
-----+            else:
-----+                self.log_test("Authentication Setup", False, f"Registration failed: {response.status_code} - {response.text}")
-----+                return False
-----+                
-----+        except Exception as e:
-----+            self.log_test("Authentication Setup", False, f"Auth setup error: {str(e)}")
-----+            return False
-----+
-----+    def test_sugar_points_calculation_logic(self):
-----+        """Test all 8 SugarPoints calculation cases from specification"""
-----+        print("=== Testing SugarPoints Calculation Logic ===")
-----+        
-----+        test_cases = [
-----+            {
-----+                "name": "Zero-Carb Food (0g carbs)",
-----+                "carbs_per_100g": 0.0,
-----+                "portion_size": 100,
-----+                "expected_sugar_points": 0,
-----+                "expected_blocks": 0,
-----+                "expected_text": "Nil SugarPoints"
-----+            },
-----+            {
-----+                "name": "Exact 1g Carb",
-----+                "carbs_per_100g": 1.0,
-----+                "portion_size": 100,
-----+                "expected_sugar_points": 1,
-----+                "expected_blocks": 0,
-----+                "expected_text": "1 SugarPoints"
-----+            },
-----+            {
-----+                "name": "Typical Soda (36g carbs)",
-----+                "carbs_per_100g": 36.0,
-----+                "portion_size": 100,
-----+                "expected_sugar_points": 36,
-----+                "expected_blocks": 6,
-----+                "expected_text": "36 SugarPoints"
-----+            },
-----+            {
-----+                "name": "Non-integer Carb (7.4g carbs)",
-----+                "carbs_per_100g": 7.4,
-----+                "portion_size": 100,
-----+                "expected_sugar_points": 7,
-----+                "expected_blocks": 1,
-----+                "expected_text": "7 SugarPoints"
-----+            },
-----+            {
-----+                "name": "High Protein, Low Carb (35g protein, 3g carbs)",
-----+                "carbs_per_100g": 3.0,
-----+                "fat_per_100g": 0.0,
-----+                "protein_per_100g": 35.0,
-----+                "portion_size": 100,
-----+                "expected_sugar_points": 3,
-----+                "expected_blocks": 0,
-----+                "expected_text": "3 SugarPoints"
-----+            },
-----+            {
-----+                "name": "Full Nutrient Set (12.6g carbs, 4.2g fat, 5g protein)",
-----+                "carbs_per_100g": 12.6,
-----+                "fat_per_100g": 4.2,
-----+                "protein_per_100g": 5.0,
-----+                "portion_size": 100,
-----+                "expected_sugar_points": 13,  # rounded from 12.6
-----+                "expected_blocks": 2,  # rounded(13/6)
-----+                "expected_text": "13 SugarPoints"
-----+            },
-----+            {
-----+                "name": "Large Portion Test (18g carbs per 100g, 200g portion)",
-----+                "carbs_per_100g": 18.0,
-----+                "portion_size": 200,
-----+                "expected_sugar_points": 36,  # (18 * 200) / 100 = 36
-----+                "expected_blocks": 6,
-----+                "expected_text": "36 SugarPoints"
-----+            },
-----+            {
-----+                "name": "Small Portion Test (30g carbs per 100g, 50g portion)",
-----+                "carbs_per_100g": 30.0,
-----+                "portion_size": 50,
-----+                "expected_sugar_points": 15,  # (30 * 50) / 100 = 15
-----+                "expected_blocks": 2,  # round(15/6) = round(2.5) = 2 (banker's rounding)
-----+                "expected_text": "15 SugarPoints"
-----+            }
-----+        ]
-----+        
-----+        for i, case in enumerate(test_cases):
-----+            try:
-----+                # Create food entry
-----+                entry_data = {
-----+                    "name": f"Test Food {i+1}: {case['name']}",
-----+                    "carbs_per_100g": case["carbs_per_100g"],
-----+                    "fat_per_100g": case.get("fat_per_100g", 0.0),
-----+                    "protein_per_100g": case.get("protein_per_100g", 0.0),
-----+                    "portion_size": case["portion_size"],
-----+                    "meal_type": "snack"
-----+                }
-----+                
-----+                response = self.session.post(f"{API_BASE}/food/entries", json=entry_data)
-----+                
-----+                if response.status_code == 200:
-----+                    entry = response.json()
-----+                    
-----+                    # Verify SugarPoints calculation
-----+                    actual_sugar_points = entry.get("sugar_points")
-----+                    actual_blocks = entry.get("sugar_point_blocks")
-----+                    
-----+                    points_correct = actual_sugar_points == case["expected_sugar_points"]
-----+                    blocks_correct = actual_blocks == case["expected_blocks"]
-----+                    
-----+                    if points_correct and blocks_correct:
-----+                        self.log_test(
-----+                            f"SugarPoints Calculation: {case['name']}", 
-----+                            True,
-----+                            f"SugarPoints: {actual_sugar_points}, Blocks: {actual_blocks}"
-----+                        )
-----+                    else:
-----+                        self.log_test(
-----+                            f"SugarPoints Calculation: {case['name']}", 
-----+                            False,
-----+                            f"Calculation mismatch",
-----+                            f"Points: {case['expected_sugar_points']}, Blocks: {case['expected_blocks']}",
-----+                            f"Points: {actual_sugar_points}, Blocks: {actual_blocks}"
-----+                        )
-----+                        
-----+                    # Test nutrition data preservation
-----+                    if case.get("protein_per_100g"):
-----+                        protein_correct = entry.get("protein_per_100g") == case["protein_per_100g"]
-----+                        self.log_test(
-----+                            f"Protein Preservation: {case['name']}", 
-----+                            protein_correct,
-----+                            f"Expected: {case['protein_per_100g']}g, Got: {entry.get('protein_per_100g')}g"
-----+                        )
-----+                        
-----+                    if case.get("fat_per_100g"):
-----+                        fat_correct = entry.get("fat_per_100g") == case["fat_per_100g"]
-----+                        self.log_test(
-----+                            f"Fat Preservation: {case['name']}", 
-----+                            fat_correct,
-----+                            f"Expected: {case['fat_per_100g']}g, Got: {entry.get('fat_per_100g')}g"
-----+                        )
-----+                        
-----+                else:
-----+                    self.log_test(
-----+                        f"SugarPoints Calculation: {case['name']}", 
-----+                        False,
-----+                        f"API Error: {response.status_code} - {response.text}"
-----+                    )
-----+                    
-----+            except Exception as e:
-----+                self.log_test(
-----+                    f"SugarPoints Calculation: {case['name']}", 
-----+                    False,
-----+                    f"Exception: {str(e)}"
-----+                )
-----+
-----+    def test_missing_carbs_handling(self):
-----+        """Test error handling for missing nutritional data"""
-----+        print("=== Testing Missing Carbs Field Handling ===")
-----+        
-----+        try:
-----+            # Test with completely missing carbs data
-----+            entry_data = {
-----+                "name": "Test Food - No Carbs Data",
-----+                "portion_size": 100,
-----+                "meal_type": "snack"
-----+                # No carbs_per_100g field
-----+            }
-----+            
-----+            response = self.session.post(f"{API_BASE}/food/entries", json=entry_data)
-----+            
-----+            if response.status_code == 200:
-----+                entry = response.json()
-----+                # Should default to 0 carbs
-----+                if entry.get("sugar_points") == 0 and entry.get("carbs_per_100g") == 0.0:
-----+                    self.log_test(
-----+                        "Missing Carbs Handling", 
-----+                        True,
-----+                        "Correctly defaulted to 0 carbs and 0 SugarPoints"
-----+                    )
-----+                else:
-----+                    self.log_test(
-----+                        "Missing Carbs Handling", 
-----+                        False,
-----+                        f"Unexpected values: carbs={entry.get('carbs_per_100g')}, points={entry.get('sugar_points')}"
-----+                    )
-----+            else:
-----+                self.log_test(
-----+                    "Missing Carbs Handling", 
-----+                    False,
-----+                    f"API Error: {response.status_code} - {response.text}"
-----+                )
-----+                
-----+        except Exception as e:
-----+            self.log_test("Missing Carbs Handling", False, f"Exception: {str(e)}")
-----+
-----+    def test_backward_compatibility(self):
-----+        """Test backward compatibility with legacy sugar_content field"""
-----+        print("=== Testing Backward Compatibility ===")
-----+        
-----+        try:
-----+            # Test with legacy sugar_content field
-----+            entry_data = {
-----+                "name": "Legacy Test Food",
-----+                "sugar_content": 0.25,  # 25g per 100g in old format (per gram)
-----+                "portion_size": 100,
-----+                "meal_type": "snack"
-----+            }
-----+            
-----+            response = self.session.post(f"{API_BASE}/food/entries", json=entry_data)
-----+            
-----+            if response.status_code == 200:
-----+                entry = response.json()
-----+                
-----+                # Should convert sugar_content to carbs_per_100g
-----+                expected_carbs = 25.0  # 0.25 * 100
-----+                expected_points = 25
-----+                expected_blocks = 4  # round(25/6)
-----+                
-----+                carbs_correct = entry.get("carbs_per_100g") == expected_carbs
-----+                points_correct = entry.get("sugar_points") == expected_points
-----+                blocks_correct = entry.get("sugar_point_blocks") == expected_blocks
-----+                
-----+                if carbs_correct and points_correct and blocks_correct:
-----+                    self.log_test(
-----+                        "Backward Compatibility", 
-----+                        True,
-----+                        f"Legacy conversion: {entry.get('carbs_per_100g')}g carbs, {entry.get('sugar_points')} points"
-----+                    )
-----+                else:
-----+                    self.log_test(
-----+                        "Backward Compatibility", 
-----+                        False,
-----+                        f"Conversion failed",
-----+                        f"Carbs: {expected_carbs}, Points: {expected_points}, Blocks: {expected_blocks}",
-----+                        f"Carbs: {entry.get('carbs_per_100g')}, Points: {entry.get('sugar_points')}, Blocks: {entry.get('sugar_point_blocks')}"
-----+                    )
-----+            else:
-----+                self.log_test(
-----+                    "Backward Compatibility", 
-----+                    False,
-----+                    f"API Error: {response.status_code} - {response.text}"
-----+                )
-----+                
-----+        except Exception as e:
-----+            self.log_test("Backward Compatibility", False, f"Exception: {str(e)}")
-----+
-----+    def test_today_entries_api(self):
-----+        """Test today entries API with SugarPoints totals and text formatting"""
-----+        print("=== Testing Today Entries API ===")
-----+        
-----+        try:
-----+            response = self.session.get(f"{API_BASE}/food/entries/today")
-----+            
-----+            if response.status_code == 200:
-----+                data = response.json()
-----+                
-----+                # Check required SugarPoints fields
-----+                required_fields = [
-----+                    "total_sugar_points", 
-----+                    "total_sugar_point_blocks", 
-----+                    "sugar_points_text", 
-----+                    "sugar_point_blocks_text"
-----+                ]
-----+                
-----+                missing_fields = [field for field in required_fields if field not in data]
-----+                
-----+                if not missing_fields:
-----+                    total_points = data["total_sugar_points"]
-----+                    total_blocks = data["total_sugar_point_blocks"]
-----+                    points_text = data["sugar_points_text"]
-----+                    blocks_text = data["sugar_point_blocks_text"]
-----+                    
-----+                    # Verify text formatting
-----+                    expected_points_text = f"{total_points} SugarPoints" if total_points > 0 else "Nil SugarPoints"
-----+                    expected_blocks_text = f"{total_blocks} Blocks"
-----+                    
-----+                    text_correct = (points_text == expected_points_text and 
-----+                                  blocks_text == expected_blocks_text)
-----+                    
-----+                    # Verify blocks calculation
-----+                    expected_blocks = round(total_points / 6) if total_points > 0 else 0
-----+                    blocks_correct = total_blocks == expected_blocks
-----+                    
-----+                    if text_correct and blocks_correct:
-----+                        self.log_test(
-----+                            "Today Entries API", 
-----+                            True,
-----+                            f"Total: {total_points} SugarPoints ({total_blocks} Blocks)"
-----+                        )
-----+                    else:
-----+                        self.log_test(
-----+                            "Today Entries API", 
-----+                            False,
-----+                            f"Text/calculation mismatch",
-----+                            f"Points text: '{expected_points_text}', Blocks: {expected_blocks}",
-----+                            f"Points text: '{points_text}', Blocks: {total_blocks}"
-----+                        )
-----+                else:
-----+                    self.log_test(
-----+                        "Today Entries API", 
-----+                        False,
-----+                        f"Missing required fields: {missing_fields}"
-----+                    )
-----+                    
-----+            else:
-----+                self.log_test(
-----+                    "Today Entries API", 
-----+                    False,
-----+                    f"API Error: {response.status_code} - {response.text}"
-----+                )
-----+                
-----+        except Exception as e:
-----+            self.log_test("Today Entries API", False, f"Exception: {str(e)}")
-----+
-----+    def test_food_search_api(self):
-----+        """Test food search API with carbs/fat/protein extraction"""
-----+        print("=== Testing Food Search API ===")
-----+        
-----+        try:
-----+            search_data = {"query": "apple", "limit": 5}
-----+            response = self.session.post(f"{API_BASE}/food/search", json=search_data)
-----+            
-----+            if response.status_code == 200:
-----+                data = response.json()
-----+                results = data.get("results", [])
-----+                
-----+                if results:
-----+                    # Check first result for nutrition fields
-----+                    first_result = results[0]
-----+                    required_fields = ["carbs_per_100g", "fat_per_100g", "protein_per_100g"]
-----+                    
-----+                    has_nutrition = all(field in first_result for field in required_fields)
-----+                    
-----+                    if has_nutrition:
-----+                        carbs = first_result["carbs_per_100g"]
-----+                        fat = first_result["fat_per_100g"]
-----+                        protein = first_result["protein_per_100g"]
-----+                        
-----+                        # Verify values are reasonable for apple
-----+                        carbs_reasonable = 10 <= carbs <= 20  # Apples have ~14g carbs per 100g
-----+                        fat_reasonable = 0 <= fat <= 1       # Apples have minimal fat
-----+                        protein_reasonable = 0 <= protein <= 2  # Apples have minimal protein
-----+                        
-----+                        if carbs_reasonable and fat_reasonable and protein_reasonable:
-----+                            self.log_test(
-----+                                "Food Search API", 
-----+                                True,
-----+                                f"Apple nutrition: {carbs}g carbs, {fat}g fat, {protein}g protein"
-----+                            )
-----+                        else:
-----+                            self.log_test(
-----+                                "Food Search API", 
-----+                                False,
-----+                                f"Unreasonable nutrition values for apple: {carbs}g carbs, {fat}g fat, {protein}g protein"
-----+                            )
-----+                    else:
-----+                        self.log_test(
-----+                            "Food Search API", 
-----+                            False,
-----+                            f"Missing nutrition fields in search results"
-----+                        )
-----+                else:
-----+                    self.log_test(
-----+                        "Food Search API", 
-----+                        False,
-----+                        "No search results returned"
-----+                    )
-----+                    
-----+            else:
-----+                self.log_test(
-----+                    "Food Search API", 
-----+                    False,
-----+                    f"API Error: {response.status_code} - {response.text}"
-----+                )
-----+                
-----+        except Exception as e:
-----+            self.log_test("Food Search API", False, f"Exception: {str(e)}")
-----+
-----+    def test_popular_foods_api(self):
-----+        """Test popular foods API with nutrition format"""
-----+        print("=== Testing Popular Foods API ===")
-----+        
-----+        try:
-----+            response = self.session.get(f"{API_BASE}/food/popular?limit=3")
-----+            
-----+            if response.status_code == 200:
-----+                data = response.json()
-----+                results = data.get("results", [])
-----+                
-----+                if results:
-----+                    # Check nutrition format in results
-----+                    nutrition_complete = True
-----+                    for food in results:
-----+                        required_fields = ["carbs_per_100g", "fat_per_100g", "protein_per_100g"]
-----+                        if not all(field in food for field in required_fields):
-----+                            nutrition_complete = False
-----+                            break
-----+                    
-----+                    if nutrition_complete:
-----+                        self.log_test(
-----+                            "Popular Foods API", 
-----+                            True,
-----+                            f"Retrieved {len(results)} foods with complete nutrition data"
-----+                        )
-----+                    else:
-----+                        self.log_test(
-----+                            "Popular Foods API", 
-----+                            False,
-----+                            "Some foods missing nutrition data"
-----+                        )
-----+                else:
-----+                    self.log_test(
-----+                        "Popular Foods API", 
-----+                        False,
-----+                        "No popular foods returned"
-----+                    )
-----+                    
-----+            else:
-----+                self.log_test(
-----+                    "Popular Foods API", 
-----+                    False,
-----+                    f"API Error: {response.status_code} - {response.text}"
-----+                )
-----+                
-----+        except Exception as e:
-----+            self.log_test("Popular Foods API", False, f"Exception: {str(e)}")
-----+
-----+    def test_api_timeout_fallback(self):
-----+        """Test API timeout fallback mechanism"""
-----+        print("=== Testing API Timeout Fallback ===")
-----+        
-----+        try:
-----+            # Test food search which should have fallback
-----+            search_data = {"query": "nonexistent_food_12345", "limit": 1}
-----+            response = self.session.post(f"{API_BASE}/food/search", json=search_data)
-----+            
-----+            if response.status_code == 200:
-----+                data = response.json()
-----+                results = data.get("results", [])
-----+                
-----+                # Should return fallback results even for non-existent food
-----+                if results:
-----+                    self.log_test(
-----+                        "API Timeout Fallback", 
-----+                        True,
-----+                        f"Fallback mechanism working - returned {len(results)} results"
-----+                    )
-----+                else:
-----+                    self.log_test(
-----+                        "API Timeout Fallback", 
-----+                        False,
-----+                        "No fallback results provided"
-----+                    )
-----+            else:
-----+                self.log_test(
-----+                    "API Timeout Fallback", 
-----+                    False,
-----+                    f"API Error: {response.status_code} - {response.text}"
-----+                )
-----+                
-----+        except Exception as e:
-----+            self.log_test("API Timeout Fallback", False, f"Exception: {str(e)}")
-----+
-----+    def run_all_tests(self):
-----+        """Run all SugarPoints backend tests"""
-----+        print("🧪 Starting SugarPoints Backend Testing Suite")
-----+        print(f"Backend URL: {BACKEND_URL}")
-----+        print("=" * 60)
-----+        
-----+        # Setup authentication
-----+        if not self.setup_auth():
-----+            print("❌ Authentication setup failed. Cannot proceed with tests.")
-----+            return False
-----+        
-----+        # Run all test suites
-----+        self.test_sugar_points_calculation_logic()
-----+        self.test_missing_carbs_handling()
-----+        self.test_backward_compatibility()
-----+        self.test_today_entries_api()
-----+        self.test_food_search_api()
-----+        self.test_popular_foods_api()
-----+        self.test_api_timeout_fallback()
-----+        
-----+        # Summary
-----+        print("=" * 60)
-----+        print("🏁 Test Summary")
-----+        print("=" * 60)
-----+        
-----+        total_tests = len(self.test_results)
-----+        passed_tests = sum(1 for result in self.test_results if result["passed"])
-----+        failed_tests = total_tests - passed_tests
-----+        
-----+        print(f"Total Tests: {total_tests}")
-----+        print(f"✅ Passed: {passed_tests}")
-----+        print(f"❌ Failed: {failed_tests}")
-----+        print(f"Success Rate: {(passed_tests/total_tests)*100:.1f}%")
-----+        
-----+        if failed_tests > 0:
-----+            print("\n🔍 Failed Tests:")
-----+            for result in self.test_results:
-----+                if not result["passed"]:
-----+                    print(f"  • {result['test']}: {result['details']}")
-----+        
-----+        return failed_tests == 0
-----+
-----+if __name__ == "__main__":
-----+    tester = SugarPointsBackendTester()
-----+    success = tester.run_all_tests()
-----+    sys.exit(0 if success else 1)
-----\ No newline at end of file
-----diff --git a/test_result.md b/test_result.md
-----index 5eed1ee..cdc4d4b 100644
-------- a/test_result.md
-----+++ b/test_result.md
-----@@ -107,63 +107,78 @@ user_problem_statement: "Implement SugarPoints calculation system - Phase A: Sug
----- backend:
-----   - task: "SugarPoints Calculation Logic Implementation"
-----     implemented: true
------    working: false
-----+    working: true
-----     file: "server.py"
-----     stuck_count: 0
-----     priority: "high"
------    needs_retesting: true
-----+    needs_retesting: false
-----     status_history:
-----       - working: "unknown"
-----         agent: "main"
-----         comment: "Implemented SugarPoints calculation functions - calculate_sugar_points() and extract_nutrition_values(). 1 SugarPoint = 1g total carbohydrates (rounded). 1 SugarPoint Block = 6 SugarPoints (rounded to nearest 6g). Added Nil SugarPoints handling for 0g carbs."
-----+      - working: true
-----+        agent: "testing"
-----+        comment: "PASSED: All 8 SugarPoints calculation test cases verified. Zero-carb foods show 'Nil SugarPoints', exact calculations for 1g, 36g, 7.4g carbs work correctly. Non-integer carbs properly rounded (7.4g → 7 SugarPoints). Portion size calculations accurate (18g/100g × 200g = 36 SugarPoints). Blocks calculation uses banker's rounding (15÷6=2.5→2 blocks)."
-----       
-----   - task: "Backend Models Update for SugarPoints"
-----     implemented: true
------    working: false
-----+    working: true
-----     file: "server.py" 
-----     stuck_count: 0
-----     priority: "high"
------    needs_retesting: true
-----+    needs_retesting: false
-----     status_history:
-----       - working: "unknown"
-----         agent: "main"
-----         comment: "Updated FoodEntry and FoodEntryCreate models to support new SugarPoints system fields: carbs_per_100g, fat_per_100g, protein_per_100g, sugar_points, sugar_point_blocks. Maintained backward compatibility with legacy sugar_content field."
-----+      - working: true
-----+        agent: "testing"
-----+        comment: "PASSED: Models correctly handle new SugarPoints fields. Fat and protein values preserved accurately (35g protein, 4.2g fat tested). Database schema fallback works when new columns don't exist - gracefully falls back to basic legacy fields."
----- 
-----   - task: "Food Entry Creation API Update"
-----     implemented: true
------    working: false
-----+    working: true
-----     file: "server.py"
-----     stuck_count: 0
-----     priority: "high" 
------    needs_retesting: true
-----+    needs_retesting: false
-----     status_history:
-----       - working: "unknown"
-----         agent: "main"
-----         comment: "Updated /api/food/entries POST endpoint to calculate and store SugarPoints. Added backward compatibility for legacy sugar_content field. Includes error handling for missing database columns."
-----+      - working: true
-----+        agent: "testing"
-----+        comment: "PASSED: Food entry creation API working correctly. SugarPoints calculated and stored properly. Backward compatibility verified - legacy sugar_content field (0.25) correctly converted to 25g carbs_per_100g and 25 SugarPoints. Database schema fallback functional."
----- 
-----   - task: "Today Entries API Update for SugarPoints" 
-----     implemented: true
------    working: false
-----+    working: true
-----     file: "server.py"
-----     stuck_count: 0
-----     priority: "high"
------    needs_retesting: true
-----+    needs_retesting: false
-----     status_history:
-----       - working: "unknown"
-----         agent: "main" 
-----         comment: "Updated /api/food/entries/today endpoint to return SugarPoints data: total_sugar_points, total_sugar_point_blocks, sugar_points_text, sugar_point_blocks_text. Calculates SugarPoints for existing entries that don't have them stored yet."
-----+      - working: true
-----+        agent: "testing"
-----+        comment: "PASSED: Today entries API returns all required SugarPoints fields. Text formatting correct: '25 SugarPoints' and '4 Blocks'. Aggregation working properly. Nil SugarPoints text displayed for zero carb totals."
----- 
-----   - task: "Passio Service Update for Nutrition Extraction"
-----     implemented: true
------    working: false
-----+    working: true
-----     file: "passio_service.py"
-----     stuck_count: 0
-----     priority: "high"
------    needs_retesting: true
-----+    needs_retesting: false
-----     status_history:
-----       - working: "unknown"
-----         agent: "main"
-----         comment: "Updated Passio service to extract carbs, fat, and protein instead of just sugar. Added _extract_carbs_content(), _extract_fat_content(), _extract_protein_content() methods. Updated search results to include carbs_per_100g, fat_per_100g, protein_per_100g fields."
-----+      - working: true
-----+        agent: "testing"
-----+        comment: "PASSED: Passio service correctly extracts nutrition data. Apple search returns reasonable values (14g carbs, 0.2g fat, 0.3g protein per 100g). Popular foods API provides complete nutrition data. Fallback mechanism works when API returns 401 Unauthorized - returns sensible default nutrition values."
----- 
-----   # Previous working tasks from earlier implementation
-----   - task: "Supabase Database Migration"
-----@@ -236,4 +251,6 @@ test_plan:
----- 
----- agent_communication:
-----   - agent: "main"
------    message: "Implemented Phase A of SugarPoints system: 1) Added calculate_sugar_points() function with proper rounding rules and Nil SugarPoints handling. 2) Updated backend models to support carbs/fat/protein fields. 3) Modified food entry creation and today entries APIs to use SugarPoints. 4) Enhanced Passio service to extract carbs, fat, protein instead of just sugar. Need comprehensive backend testing to verify SugarPoints calculation logic and API responses match the 8 test cases from specification."
-----\ No newline at end of file
-----+    message: "Implemented Phase A of SugarPoints system: 1) Added calculate_sugar_points() function with proper rounding rules and Nil SugarPoints handling. 2) Updated backend models to support carbs/fat/protein fields. 3) Modified food entry creation and today entries APIs to use SugarPoints. 4) Enhanced Passio service to extract carbs, fat, protein instead of just sugar. Need comprehensive backend testing to verify SugarPoints calculation logic and API responses match the 8 test cases from specification."
-----+  - agent: "testing"
-----+    message: "COMPLETED: Comprehensive SugarPoints backend testing with 100% success rate (18/18 tests passed). All 8 specification test cases verified: Zero-carb foods display 'Nil SugarPoints', exact calculations work for all carb amounts, portion size scaling accurate, blocks calculation uses proper rounding. Fixed database schema fallback issue for missing columns. Passio API fallback working despite 401 errors. All core SugarPoints functionality operational and ready for frontend integration."
-----\ No newline at end of file
--diff --git a/test_result.md b/test_result.md
--index cdc4d4b..ca38f65 100644
----- a/test_result.md
--+++ b/test_result.md
--@@ -102,9 +102,10 @@
-- # Testing Data - Main Agent and testing sub agent both should log testing data below this section
-- #====================================================================================================
-- 
---user_problem_statement: "Implement SugarPoints calculation system - Phase A: SugarPoints calculation logic, rounding rules, and Nil handling"
--+user_problem_statement: "Implement SugarPoints calculation system - Phase B: Fat & Protein + Display Updates"
-- 
-- backend:
--+  # Phase A - Completed and Working
--   - task: "SugarPoints Calculation Logic Implementation"
--     implemented: true
--     working: true
--@@ -113,12 +114,9 @@ backend:
--     priority: "high"
--     needs_retesting: false
--     status_history:
---      - working: "unknown"
---        agent: "main"
---        comment: "Implemented SugarPoints calculation functions - calculate_sugar_points() and extract_nutrition_values(). 1 SugarPoint = 1g total carbohydrates (rounded). 1 SugarPoint Block = 6 SugarPoints (rounded to nearest 6g). Added Nil SugarPoints handling for 0g carbs."
--       - working: true
--         agent: "testing"
---        comment: "PASSED: All 8 SugarPoints calculation test cases verified. Zero-carb foods show 'Nil SugarPoints', exact calculations for 1g, 36g, 7.4g carbs work correctly. Non-integer carbs properly rounded (7.4g → 7 SugarPoints). Portion size calculations accurate (18g/100g × 200g = 36 SugarPoints). Blocks calculation uses banker's rounding (15÷6=2.5→2 blocks)."
--+        comment: "PASSED: All 8 specification test cases verified. Zero-carb foods display Nil SugarPoints, exact calculations work for 1g, 36g, 7.4g carbs, portion size scaling accurate, blocks calculation uses proper banker's rounding"
--       
--   - task: "Backend Models Update for SugarPoints"
--     implemented: true
--@@ -128,12 +126,9 @@ backend:
--     priority: "high"
--     needs_retesting: false
--     status_history:
---      - working: "unknown"
---        agent: "main"
---        comment: "Updated FoodEntry and FoodEntryCreate models to support new SugarPoints system fields: carbs_per_100g, fat_per_100g, protein_per_100g, sugar_points, sugar_point_blocks. Maintained backward compatibility with legacy sugar_content field."
--       - working: true
--         agent: "testing"
---        comment: "PASSED: Models correctly handle new SugarPoints fields. Fat and protein values preserved accurately (35g protein, 4.2g fat tested). Database schema fallback works when new columns don't exist - gracefully falls back to basic legacy fields."
--+        comment: "PASSED: Models correctly handle new SugarPoints fields with fat and protein preservation, database schema fallback works gracefully"
-- 
--   - task: "Food Entry Creation API Update"
--     implemented: true
--@@ -143,12 +138,9 @@ backend:
--     priority: "high" 
--     needs_retesting: false
--     status_history:
---      - working: "unknown"
---        agent: "main"
---        comment: "Updated /api/food/entries POST endpoint to calculate and store SugarPoints. Added backward compatibility for legacy sugar_content field. Includes error handling for missing database columns."
--       - working: true
--         agent: "testing"
---        comment: "PASSED: Food entry creation API working correctly. SugarPoints calculated and stored properly. Backward compatibility verified - legacy sugar_content field (0.25) correctly converted to 25g carbs_per_100g and 25 SugarPoints. Database schema fallback functional."
--+        comment: "PASSED: API working correctly with SugarPoints calculation and storage, backward compatibility verified"
-- 
--   - task: "Today Entries API Update for SugarPoints" 
--     implemented: true
--@@ -158,12 +150,9 @@ backend:
--     priority: "high"
--     needs_retesting: false
--     status_history:
---      - working: "unknown"
---        agent: "main" 
---        comment: "Updated /api/food/entries/today endpoint to return SugarPoints data: total_sugar_points, total_sugar_point_blocks, sugar_points_text, sugar_point_blocks_text. Calculates SugarPoints for existing entries that don't have them stored yet."
--       - working: true
---        agent: "testing"
---        comment: "PASSED: Today entries API returns all required SugarPoints fields. Text formatting correct: '25 SugarPoints' and '4 Blocks'. Aggregation working properly. Nil SugarPoints text displayed for zero carb totals."
--+        agent: "testing" 
--+        comment: "PASSED: Returns all required SugarPoints fields with correct text formatting, aggregation working properly"
-- 
--   - task: "Passio Service Update for Nutrition Extraction"
--     implemented: true
--@@ -173,12 +162,9 @@ backend:
--     priority: "high"
--     needs_retesting: false
--     status_history:
---      - working: "unknown"
---        agent: "main"
---        comment: "Updated Passio service to extract carbs, fat, and protein instead of just sugar. Added _extract_carbs_content(), _extract_fat_content(), _extract_protein_content() methods. Updated search results to include carbs_per_100g, fat_per_100g, protein_per_100g fields."
--       - working: true
--         agent: "testing"
---        comment: "PASSED: Passio service correctly extracts nutrition data. Apple search returns reasonable values (14g carbs, 0.2g fat, 0.3g protein per 100g). Popular foods API provides complete nutrition data. Fallback mechanism works when API returns 401 Unauthorized - returns sensible default nutrition values."
--+        comment: "PASSED: Correctly extracts nutrition data (carbs, fat, protein per 100g), fallback mechanism works despite 401 API errors"
-- 
--   # Previous working tasks from earlier implementation
--   - task: "Supabase Database Migration"
--@@ -191,9 +177,9 @@ backend:
--     status_history:
--       - working: true
--         agent: "testing"
---        comment: "PASSED: Comprehensive testing confirms successful migration to Supabase PostgreSQL. Health endpoint shows version 2.0.0, database type 'supabase', active connection, and real-time capabilities."
--+        comment: "PASSED: Comprehensive testing confirms successful migration to Supabase PostgreSQL"
-- 
---  - task: "OpenAI Direct Integration"
--+  - task: "Authentication System with Supabase"
--     implemented: true
--     working: true
--     file: "server.py"
--@@ -203,9 +189,9 @@ backend:
--     status_history:
--       - working: true
--         agent: "testing"
---        comment: "PASSED: AI chat endpoint successfully using direct OpenAI API integration with gpt-4o-mini model."
--+        comment: "PASSED: Authentication system fully functional with Supabase"
-- 
---  - task: "Authentication System with Supabase"
--+  - task: "Passio Food Search API"
--     implemented: true
--     working: true
--     file: "server.py"
--@@ -215,42 +201,61 @@ backend:
--     status_history:
--       - working: true
--         agent: "testing"
---        comment: "PASSED: Authentication system fully functional with Supabase."
--+        comment: "PASSED: Passio food search API working correctly with fallback mechanism"
-- 
---  - task: "Passio Food Search API"
--+frontend:
--+  # Phase B - Newly Implemented
--+  - task: "Home Screen SugarPoints Display"
--     implemented: true
---    working: true
---    file: "server.py"
--+    working: false
--+    file: "app/(tabs)/home.tsx"
--     stuck_count: 0
--     priority: "high"
---    needs_retesting: false
--+    needs_retesting: true
--     status_history:
---      - working: true
---        agent: "testing"
---        comment: "PASSED: Passio food search API working correctly with fallback mechanism."
--+      - working: "unknown"
--+        agent: "main"
--+        comment: "Updated HomeScreen to display SugarPoints instead of sugar grams. Added SugarPoints progress circle (120 target), status messages, dark theme styling. Updated recent entries to show SugarPoints, fat, and protein. Removed calorie references."
-- 
---frontend:
---  # No frontend changes implemented yet
--+  - task: "Add Entry Modal SugarPoints Integration"
--+    implemented: true
--+    working: false
--+    file: "app/(modals)/add-entry.tsx"
--+    stuck_count: 0
--+    priority: "high"
--+    needs_retesting: true
--+    status_history:
--+      - working: "unknown"
--+        agent: "main"
--+        comment: "Transformed AddEntryModal from sugar tracking to comprehensive nutrition form. Added carbs/fat/protein fields, SugarPoints calculation display, removed calorie fields. Implemented dark theme, improved UX with header and enhanced summary section."
--+
--+  - task: "Dark Theme Design System Implementation"
--+    implemented: true
--+    working: false
--+    file: "multiple frontend files"
--+    stuck_count: 0
--+    priority: "medium"
--+    needs_retesting: true
--+    status_history:
--+      - working: "unknown"
--+        agent: "main"
--+        comment: "Applied consistent dark theme across Home and AddEntry components using provided design system. Background: #0c0c0c, Surface: #111827, Primary: #2563EB, proper typography and spacing following 8pt grid system."
--   
-- metadata:
--   created_by: "main_agent"
---  version: "3.0"
--+  version: "3.1"
--   test_sequence: 3
---  run_ui: false
--+  run_ui: true
-- 
-- test_plan:
--   current_focus:
---    - "SugarPoints Calculation Logic Implementation"
---    - "Backend Models Update for SugarPoints"
---    - "Food Entry Creation API Update"
---    - "Today Entries API Update for SugarPoints"
---    - "Passio Service Update for Nutrition Extraction"
--+    - "Home Screen SugarPoints Display"
--+    - "Add Entry Modal SugarPoints Integration"
--+    - "Dark Theme Design System Implementation"
--   stuck_tasks: []
--   test_all: false
--   test_priority: "high_first"
-- 
-- agent_communication:
--   - agent: "main"
---    message: "Implemented Phase A of SugarPoints system: 1) Added calculate_sugar_points() function with proper rounding rules and Nil SugarPoints handling. 2) Updated backend models to support carbs/fat/protein fields. 3) Modified food entry creation and today entries APIs to use SugarPoints. 4) Enhanced Passio service to extract carbs, fat, protein instead of just sugar. Need comprehensive backend testing to verify SugarPoints calculation logic and API responses match the 8 test cases from specification."
---  - agent: "testing"
---    message: "COMPLETED: Comprehensive SugarPoints backend testing with 100% success rate (18/18 tests passed). All 8 specification test cases verified: Zero-carb foods display 'Nil SugarPoints', exact calculations work for all carb amounts, portion size scaling accurate, blocks calculation uses proper rounding. Fixed database schema fallback issue for missing columns. Passio API fallback working despite 401 errors. All core SugarPoints functionality operational and ready for frontend integration."
--\ No newline at end of file
--+    message: "Completed Phase B implementation: 1) Updated HomeScreen to display SugarPoints with progress circle and enhanced nutrition info in food entries. 2) Transformed AddEntryModal from sugar-focused to comprehensive nutrition form with carbs/fat/protein tracking and SugarPoints calculation. 3) Applied consistent dark theme design system across components. All changes maintain backward compatibility and follow the provided UI design system. Backend Phase A remains fully functional with 100% test success rate."
--\ No newline at end of file
